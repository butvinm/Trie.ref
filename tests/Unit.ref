*$FROM LibraryEx
$EXTERN Reduce;

*$FROM lib/Tasty
$EXTERN Test, RunTests;

*$FROM src/Trie
$EXTERN TrieType, Trie, Trie-Create, Trie-Draw, Trie-Depth, TrieType-Init;


$ENTRY Go {
  = <RunTests
    <TestInsert>
    <TestBuild>
    <TestDelete>
    <TestLookup>
  >;
}


LexCmp {
  s.C0 s.C1 = <Compare <Ord s.C0> <Ord s.C1>>;
}


WordsMock {
  =
    ('bca') ('aa') ('bcc') ('caa') ('ab')
    ('bcb') ('ccc') ('cab') ('b') ('cac') ('cba') ('cbb') ('cbc') ('aba')
    ('abb') ('abc') ('aca') ('acb') ('c') ('acc') ('baa') ('bab') ('bac')
    ('bba') ('bbb') ('bbc')  ('ac') ('aab') ('aac') ('a') ('cca') ('ccb')
}


TrieMock {
  =
  [Trie Root
    [Trie 'a'
      [Trie 'a'
        [Trie 'b' [Trie Eow ]]
        [Trie 'c' [Trie Eow ]]
        [Trie Eow ]
      ]
      [Trie 'b'
        [Trie 'a' [Trie Eow ]]
        [Trie 'b' [Trie Eow ]]
        [Trie 'c' [Trie Eow ]]
        [Trie Eow ]
      ]
      [Trie 'c'
        [Trie 'a' [Trie Eow ]]
        [Trie 'b' [Trie Eow ]]
        [Trie 'c' [Trie Eow ]]
        [Trie Eow ]
      ]
      [Trie Eow ]
    ]
    [Trie 'b'
      [Trie 'a'
        [Trie 'a' [Trie Eow ]]
        [Trie 'b' [Trie Eow ]]
        [Trie 'c' [Trie Eow ]]
      ]
      [Trie 'b'
        [Trie 'a' [Trie Eow ]]
        [Trie 'b' [Trie Eow ]]
        [Trie 'c' [Trie Eow ]]
      ]
      [Trie 'c'
        [Trie 'a' [Trie Eow ]]
        [Trie 'b' [Trie Eow ]]
        [Trie 'c' [Trie Eow ]]
      ]
      [Trie Eow ]
    ]
    [Trie 'c'
      [Trie 'a'
        [Trie 'a' [Trie Eow ]]
        [Trie 'b' [Trie Eow ]]
        [Trie 'c' [Trie Eow ]]
      ]
      [Trie 'b'
        [Trie 'a' [Trie Eow ]]
        [Trie 'b' [Trie Eow ]]
        [Trie 'c' [Trie Eow ]]
      ]
      [Trie 'c'
        [Trie 'a' [Trie Eow ]]
        [Trie 'b' [Trie Eow ]]
        [Trie 'c' [Trie Eow ]]
      ]
      [Trie Eow ]
    ]
  ];
}


TestInsert {
  = <TrieType-Init &LexCmp> : [TrieType
    (Empty t.Empty)
    (Build t.Build)
    (Insert t.Insert)
    (Delete t.Delete)
    (Lookup t.Lookup)
    (Show t.Show)
  ]
  =
    <Test
      ('Inserting a word into an empty trie')
      {
        = <t.Insert t.Empty 'hello'>;
      }
      [Trie Root
        [Trie 'h'
          [Trie 'e'
            [Trie 'l'
              [Trie 'l'
                [Trie 'o' [Trie Eow]]
              ]
            ]
          ]
        ]
      ]
    >
    <Test
      ('Inserting a word into a trie with a different word')
      {
        = <t.Insert <t.Insert t.Empty 'hello'> 'world'>;
      }
      [Trie Root
        [Trie 'h'
          [Trie 'e'
            [Trie 'l'
              [Trie 'l'
                [Trie 'o' [Trie Eow]]
              ]
            ]
          ]
        ]
        [Trie 'w'
          [Trie 'o'
            [Trie 'r'
              [Trie 'l'
                [Trie 'd' [Trie Eow]]
              ]
            ]
          ]
        ]
      ]
    >
    <Test
      ('Insert an empty word')
      {
        = <t.Insert t.Empty ''>;
      }
      [Trie Root [Trie Eow]]
    >
    <Test
      ('Insert a word that is a prefix of another word')
      {
        = <t.Insert <t.Insert t.Empty 'hello'> 'hell'>;
      }
      [Trie Root
        [Trie 'h'
          [Trie 'e'
            [Trie 'l'
              [Trie 'l'
                [Trie 'o' [Trie Eow]]
                [Trie Eow]
              ]
            ]
          ]
        ]
      ]
    >
    <Test
      ('Inserts must preserve alphabetical order')
      {
        = <t.Insert <t.Insert <t.Insert <t.Insert t.Empty ''> 'b'> 'c'> 'a'>;
      }
      [Trie Root
        [Trie 'a' [Trie Eow]]
        [Trie 'b' [Trie Eow]]
        [Trie 'c' [Trie Eow]]
        [Trie Eow]
      ]
    >
}


TestBuild {
  = <TrieType-Init &LexCmp> : [TrieType
    (Empty t.Empty)
    (Build t.Build)
    (Insert t.Insert)
    (Delete t.Delete)
    (Lookup t.Lookup)
    (Show t.Show)
  ]
  =
    <Test
      ('Building a trie from an empty list')
      {
        = <t.Build /* empty */>;
      }
      t.Empty
    >
    <Test
      ('Building a trie from a list of words')
      {
        = <t.Build <WordsMock>>;
      }
      <TrieMock>
    >
}


TestDelete {
  = <TrieType-Init &LexCmp> : [TrieType
    (Empty t.Empty)
    (Build t.Build)
    (Insert t.Insert)
    (Delete t.Delete)
    (Lookup t.Lookup)
    (Show t.Show)
  ]
  =
    <Test
      ('Deleting a word from an empty trie')
      {
        = <t.Delete t.Empty 'hello'>;
      }
      Fail 'Word "hello" not found in the trie'
    >
    <Test
      ('Deleting a word from a trie with a different word')
      {
        = <t.Delete <t.Insert t.Empty 'hello'> 'world'>;
      }
      Fail 'Word "world" not found in the trie'
    >
    <Test
      ('Deleting a word from a trie with the single word')
      {
        = <t.Delete <t.Insert t.Empty 'hello'> 'hello'>;
      }
      Success t.Empty
    >
    <Test
      ('Deleting a word from a trie with multiple words')
      {
        = <t.Delete <t.Insert <t.Insert t.Empty 'hello'> 'world'> 'hello'>;
      }
      Success [Trie Root
        [Trie 'w'
          [Trie 'o'
            [Trie 'r'
              [Trie 'l'
                [Trie 'd' [Trie Eow]]
              ]
            ]
          ]
        ]
      ]
    >
    <Test
      ('Deleting a word that is a prefix of another word')
      {
        = <t.Delete <t.Insert <t.Insert t.Empty 'hello'> 'hell'> 'hell'>;
      }
      Success [Trie Root
        [Trie 'h'
          [Trie 'e'
            [Trie 'l'
              [Trie 'l'
                [Trie 'o' [Trie Eow]]
              ]
            ]
          ]
        ]
      ]
    >
}


TestLookup {
  = <TrieType-Init &LexCmp> : [TrieType
    (Empty t.Empty)
    (Build t.Build)
    (Insert t.Insert)
    (Delete t.Delete)
    (Lookup t.Lookup)
    (Show t.Show)
  ]
  =
    <Test
      ('Looking up a word in an empty trie')
      {
        = <t.Lookup t.Empty 'hello'>;
      }
      False
    >
    <Test
      ('Looking up a word in a trie with a different word')
      {
        = <t.Lookup <t.Insert t.Empty 'hello'> 'world'>;
      }
      False
    >
    <Test
      ('Looking up a word in a trie with the single word')
      {
        = <t.Lookup <t.Insert t.Empty 'hello'> 'hello'>;
      }
      True
    >
    <Test
      ('Looking up a word in a trie with multiple words')
      {
        = <t.Lookup <t.Insert <t.Insert t.Empty 'hello'> 'world'> 'hello'>;
      }
      True
    >
    <Test
      ('Looking up a word that is a prefix of another word')
      {
        = <t.Lookup <t.Insert <t.Insert t.Empty 'hello'> 'hell'> 'hell'>;
      }
      True
    >
    <Test
      ('Looking up a prefix of a word')
      {
        = <t.Lookup <t.Insert t.Empty 'hello'> 'hell'>;
      }
      False
    >
}
